This is the capstone research project that I did. Over the course of the semester I reasearched the history of existing image and other file format specifications. I proposed a file format that fits a niche none of the existing file formats cover while stating what benefits it might have and limitations. The format I came up with is an image with a text layer over the top and both the bottom and top layers can change. This is most similar to the power point file format because the end format is intended to change and have various combinations of layers to produce multiple frames. Applications include: lowering barriers to blind people with potentially built in descriptions of an image, deduplication of images -- most prominently memes -- that have many variations of text but the same image on the bottom, built in multilanguage version of a single image, tutorial-like or more explaination of technical images in one combined file, and preservation of the source image.

In the script directory, I copied the SVG file case study from the PNG Golf directory and wrote it up as an ETXT. Then I was writing and testing a program that would write the SVG file back. I took the Final SVG, saw what was required to pass SVG validation and a lof of thinking when into parsing the ETXT. Initially I had everything marked up like the text and lists were marked up in the python programming language. Once I realized that I A) shouldn't read third party generated files in that manner and B) would trip over myself trying to valid whether the braces were closed correctly I decided to switch to space delinated information.
Except for the text data. That information is separated by underscores that are escaped with the ASCII character  aka \a aka the bell character. Since I was having a lot of trouble using the escape character that every program uses, I was trying to match against a backslash using regular expressions and I got to writing "\\\\" to match a single character but even then it didn't work. because what if the backslash was escaped? I resorted to \a because it can't be printed so there's no ambiguous meaning to including it within the string.
There's still some more tweaks that could be done to this file type specification but it is fully within early alpha stages as it works decently enough. The real challenge is writing a decen rendering engine to display these images nativly instead of having to show a reflection of it off of the SVG standards. Unfrotunatly that would take far too long for a semester unless I had started at this point on day 1.

Usage is running convert.py on an ETXT file and then it outputs the SVG versions of each frame in the same directory.

Additionally I discovered that SVG files store all images either as links or in the base64 form of the data. I left my ETXT files in that form because the binary format somehow was larger than the base64 file. I suspect it has to do with how I'm pasting binary data within a text file and it is doing some sort of transform that makes it take extra space. At any rate I do consider turning the internals of ETXT into one that uses Chunks like PNG and simply have each line a separate chunk.

As part of my research ran out of time I didn't end up creating a fully function etxt viewer but did make a script that interpreted etxt images and expanded every single frame into a separate svg image.
